
	// returns true if two lines intersect
	bool linesIntersect(float (&x1), float(&y1), float(&x2), float(&y2), float(&x3), float(&y3), float(&x4), float(&y4), bool ignoreIfParallel = false)
	{
		float numerator[2] = { y2 - y1, y4 - y3 };
		float denominator[2] = { x2 - x1, x4 - x3 };
		float xIntersect, yIntersect;
		bool testCase = false;

		// preliminary check
		if (abs(numerator[0]) <= CONST::ERROR_MARGIN)
			numerator[0] = 0;
		if (abs(numerator[1]) <= CONST::ERROR_MARGIN)
			numerator[1] = 0;
		if (abs(denominator[0]) <= CONST::ERROR_MARGIN)
			denominator[0] = 0;
		if (abs(denominator[1]) <= CONST::ERROR_MARGIN)
			denominator[1] = 0;

		if (numerator[0] == 0) // horizontal line
		{
			if (denominator[1] == 0) // vertical line
			{
				//std::cout << "horizontal:vertical" << std::endl;
				// horizontal:vertical, perpendicular
				if (numerator[1] >= 0)
				{
					// y4 >= y3
					if (y1 >= y3 && y1 <= y4)
					{
						if (denominator[0] >= 0)
						{
							// x2 >= x1
							if (x3 >= x1 && x3 <= x2)
								return true;
							else
								return false;
						}
						else
						{
							// x2 < x1
							if (x3 >= x2 && x3 <= x1)
								return true;
							else
								return false;
						}
					}
					else
					{
						return false;
					}
				}
				else
				{
					// y4 < y3
					if (y1 >= y4 && y1 <= y3)
					{
						if (denominator[0] >= 0)
						{
							// x2 >= x1
							if (x3 >= x1 && x3 <= x2)
								return true;
							else
								return false;
						}
						else
						{
							// x2 < x1
							if (x3 >= x2 && x3 <= x1)
								return true;
							else
								return false;
						}
					}
					else
					{
						return false;
					}
				}
			}
			else if (numerator[1] == 0) // horizontal line
			{
				//std::cout << "horizontal:horizontal" << std::endl;
				// horizontal:horizontal, parallel
				if (!ignoreIfParallel)
				{
					if (y1 == y3)
					{
						// collinear
						if (denominator[1] >= 0)
						{
							// x4 >= x3
							if ((x1 >= x3 && x1 <= x4) || (x2 >= x3 && x2 <= x4))
								return true;
							else
								return false;
						}
						else
						{
							// x4 < x3
							if ((x1 >= x4 && x1 <= x3) || (x2 >= x4 && x2 <= x3))
								return true;
							else
								return false;
						}
					}
					else
					{
						return false;
					}
				}
				else
				{
					return false;
				}
			}
			else // non-coplanar line
			{
				//std::cout << "horizontal:non-coplanar" << std::endl;
				// horizontal:non-coplanar
				float slope2 = numerator[1] / denominator[1];
				xIntersect = (y1 - y3 + (slope2 * x3)) / slope2;
				testCase = true;
			}
		}
		else if (denominator[0] == 0) // vertical line
		{
			if (numerator[1] == 0) // horizontal line
			{
				//std::cout << "vertical:horizontal" << std::endl;
				// vertical:horizontal, perpendicular
				if (numerator[0] >= 0)
				{
					// y2 >= y1
					if (y3 >= y1 && y3 <= y2)
					{
						if (denominator[1] >= 0)
						{
							// x4 >= x3
							if (x1 >= x3 && x1 <= x4)
								return true;
							else
								return false;
						}
						else
						{
							// x4 < x3
							if (x1 >= x4 && x1 <= x3)
								return true;
							else
								return false;
						}
					}
					else
					{
						return false;
					}
				}
				else
				{
					// y2 < y1
					if (y3 >= y2 && y3 <= y1)
					{
						if (denominator[1] >= 0)
						{
							// x4 >= x3
							if (x1 >= x3 && x1 <= x4)
								return true;
							else
								return false;
						}
						else
						{
							// x4 < x3
							if (x1 >= x4 && x1 <= x3)
								return true;
							else
								return false;
						}
					}
					else
					{
						return false;
					}
				}
			}
			else if (denominator[1] == 0) // vertical line
			{
				//std::cout << "vertical:vertical" << std::endl;
				// vertical:vertical, parallel
				if (!ignoreIfParallel)
				{
					if (x1 == x3)
					{
						// collinear
						if (numerator[1] >= 0)
						{
							// y4 >= y3
							if ((y1 >= y3 && y1 <= y4) || (y2 >= y3 && y2 <= y4))
								return true;
							else
								return false;
						}
						else
						{
							// y4 < y3
							if ((y1 >= y4 && y1 <= y3) || (y2 >= y4 && y2 <= y3))
								return true;
							else
								return false;
						}
					}
					else
					{
						return false;
					}
				}
				else
				{
					return false;
				}
			}
			else // non-coplanar line
			{
				//std::cout << "vertical:non-coplanar" << std::endl;
				// vertical:non-coplanar
				float slope2 = numerator[1] / denominator[1];
				yIntersect = (slope2 * x1) + y3 - (slope2 * x3);
				testCase = false;
			}
		}
		else
		{
			if (denominator[1] == 0) // vertical line
			{
				//std::cout << "non-coplanar:vertical" << std::endl;
				// non-coplanar:vertical
				float slope1 = numerator[0] / denominator[0];
				yIntersect = (slope1 * x3) + y1 - (slope1 * x1);
				testCase = false;
			}
			else if (numerator[1] == 0) // horizontal line
			{
				//std::cout << "non-coplanar:horizontal" << std::endl;
				// non-coplanar:horizontal
				float slope1 = numerator[0] / denominator[0];
				xIntersect = (y3 - y1 + (slope1 * x1)) / slope1;
				testCase = true;
			}
			else // non-coplanar line
			{
				//std::cout << "non-coplanar:non-coplanar" << std::endl;
				// non-coplanar:non-coplanar
				float slope1 = numerator[0] / denominator[0];
				float slope2 = numerator[1] / denominator[1];
				xIntersect = (y3 - (slope2 * x3) + (slope1 * x1) - y1) / (slope1 - slope2);
				testCase = true;
			}
		}

		if (testCase)
		{
			// test xIntersect
			// return false if the intersection point is not on the first line segment
			if (denominator[0] >= 0)
			{
				// x2 >= x1
				if ((xIntersect < x1 || xIntersect > x2) && (x1 - xIntersect > CONST::ERROR_MARGIN || xIntersect - x2 > CONST::ERROR_MARGIN))
					return false;
			}
			else
			{
				// x2 < x1
				if ((xIntersect < x2 || xIntersect > x1) && (x2 - xIntersect > CONST::ERROR_MARGIN || xIntersect - x1 > CONST::ERROR_MARGIN))
					return false;
			}
			// return false if the intersection point is not on the second line segment
			if (denominator[1] >= 0)
			{
				// x4 >= x3
				if ((xIntersect < x3 || xIntersect > x4) && (x3 - xIntersect > CONST::ERROR_MARGIN || xIntersect - x4 > CONST::ERROR_MARGIN))
					return false;
			}
			else
			{
				// x4 < x3
				if ((xIntersect < x4 || xIntersect > x3) && (x4 - xIntersect > CONST::ERROR_MARGIN || xIntersect - x3 > CONST::ERROR_MARGIN))
					return false;
			}
		}
		else
		{
			// test yIntersect
			// return false if the intersection point is not on the first line segment
			if (numerator[0] >= 0)
			{
				// y2 >= y1
				if ((yIntersect < y1 || yIntersect > y2) && (y1 - yIntersect > CONST::ERROR_MARGIN || yIntersect - y2 > CONST::ERROR_MARGIN))
					return false;
			}
			else
			{
				// y2 < y1
				if ((yIntersect < y2 || yIntersect > y1) && (y2 - yIntersect > CONST::ERROR_MARGIN || yIntersect - y1 > CONST::ERROR_MARGIN))
					return false;
			}
			// return false if the intersection point is not on the second line segment
			if (numerator[1] >= 0)
			{
				// y4 >= y3
				if ((yIntersect < y3 || yIntersect > y4) && (y3 - yIntersect > CONST::ERROR_MARGIN || yIntersect - y4 > CONST::ERROR_MARGIN))
					return false;
			}
			else
			{
				// y4 < y3
				if ((yIntersect < y4 || yIntersect > y3) && (y4 - yIntersect > CONST::ERROR_MARGIN || yIntersect - y3 > CONST::ERROR_MARGIN))
					return false;
			}
		}

		return true;
	}

	// check if an object had collided with any barriers in a given list and resolve the first collision that occurred in its path
	// returns true if a collision was detected and resolved
	// returns false if no collision was detected
	bool detectAndResolveCollisions(Object object, Barrier1D** barrier1D, Barrier2D** barrier2D)
	{
		float xChange = object.x1 - object.prevX1;
		float yChange = object.y1 - object.prevY1;
		float *x1, *y1, *x2, *y2, *x3, *y3, *x4, *y4, *x5 = &xChange, *y5 = &yChange;
		bool checkWithPoint = false;
		if (xChange == 0)
		{
			// draw vertical lines
			if (yChange > 0)
			{
				// object.y1 > object.prevY
				// first line
				x1 = &object.x1;
				y1 = &object.y2;
				x2 = &object.prevX1;
				y2 = &object.prevY2;
				// second line
				x3 = &object.x2;
				y3 = &object.y2;
				x4 = &object.prevX2;
				y4 = &object.prevY2;
			}
			else if(yChange < 0)
			{
				// object.y1 < object.prevY
				// first line
				x1 = &object.x1;
				y1 = &object.y1;
				x2 = &object.prevX1;
				y2 = &object.prevY1;
				// second line
				x3 = &object.x2;
				y3 = &object.y1;
				x4 = &object.prevX2;
				y4 = &object.prevY1;
			}
			else
			{
				// object didn't move
				return false;
			}
		}
		else if (yChange == 0)
		{
			// draw horizontal lines
			if (xChange > 0)
			{
				// object.x1 > object.prevX
				// first line
				x1 = &object.x2;
				y1 = &object.y1;
				x2 = &object.prevX2;
				y2 = &object.prevY1;
				// second line
				x3 = &object.x2;
				y3 = &object.y2;
				x4 = &object.prevX2;
				y4 = &object.prevY2;
			}
			else if (xChange < 0)
			{
				// object.x1 < object.prevX
				// first line
				x1 = &object.x1;
				y1 = &object.y1;
				x2 = &object.prevX1;
				y2 = &object.prevY1;
				// second line
				x3 = &object.x1;
				y3 = &object.y2;
				x4 = &object.prevX1;
				y4 = &object.prevY2;
			}
			else
			{
				// object didn't move
				return false;
			}
		}
		else
		{
			if (yChange / xChange > 0)
			{
				// positive slope
				// first line
				x1 = &object.x1;
				y1 = &object.y2;
				x2 = &object.prevX1;
				y2 = &object.prevY2;
				// second line
				x3 = &object.x2;
				y3 = &object.y1;
				x4 = &object.prevX2;
				y4 = &object.prevY1;
				// point
				checkWithPoint = true;
				if (xChange > 0)
				{
					// object.x1 > object.prevX1
					x5 = &object.x2;
					y5 = &object.y2;
				}
				else
				{
					// object.x1 < object.prevX1
					x5 = &object.x1;
					y5 = &object.y1;
				}
			}
			else
			{
				// negative slope
				// first line
				x1 = &object.x1;
				y1 = &object.y1;
				x2 = &object.prevX1;
				y2 = &object.prevY1;
				// second line
				x3 = &object.x2;
				y3 = &object.y2;
				x4 = &object.prevX2;
				y4 = &object.prevY2;
				// point
				checkWithPoint = true;
				if (xChange > 0)
				{
					// object.x1 > object.prevX1
					x5 = &object.x1;
					y5 = &object.y2;
				}
				else
				{
					// object.x1 < object.prevX1
					x5 = &object.x2;
					y5 = &object.y1;
				}
			}
		}
		// draw hitbox
		// ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
		float point[8] = { *x1, *y1, *x2, *y2, *x3, *y3, *x4, *y4 };
		point[0] = (float)(2 * (point[0]) / (CONST::WINDOW_ASPECT_RATIO * CONST::INV_SCALE_FACTOR)) - 1;
		point[1] = (float)(2 * (point[1]) / (CONST::INV_SCALE_FACTOR)) - 1;
		point[2] = (float)(2 * (point[2]) / (CONST::WINDOW_ASPECT_RATIO * CONST::INV_SCALE_FACTOR)) - 1;
		point[3] = (float)(2 * (point[3]) / (CONST::INV_SCALE_FACTOR)) - 1;
		point[4] = (float)(2 * (point[4]) / (CONST::WINDOW_ASPECT_RATIO * CONST::INV_SCALE_FACTOR)) - 1;
		point[5] = (float)(2 * (point[5]) / (CONST::INV_SCALE_FACTOR)) - 1;
		point[6] = (float)(2 * (point[6]) / (CONST::WINDOW_ASPECT_RATIO * CONST::INV_SCALE_FACTOR)) - 1;
		point[7] = (float)(2 * (point[7]) / (CONST::INV_SCALE_FACTOR)) - 1;
		glBufferData(GL_ARRAY_BUFFER, sizeof(point), point, GL_DYNAMIC_DRAW);
		// ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
		/*float c1, v1, c2, v2, c3, v3, c4, v4;

		c1 = 8.98889432424234f;
		v1 = 0.06664862343523f;
		c2 = 8.9666743545f;
		v2 = 0.066648643543543f;
		c3 = 0.0f;
		v3 = 0.0f;
		c4 = 0.0f;
		v4 = 10.0f;
		std::cout << std::endl << linesIntersect(c1, v1, c2, v2, c3, v3, c4, v4) << std::endl << std::endl;
		
		c1 = 8.98889f;
		v1 = 0.0666486f;
		c2 = 8.96667f;
		v2 = 0.0666486f;
		c3 = 0.0f;
		v3 = 0.0f;
		c4 = 0.0f;
		v4 = 10.0f;
		std::cout << std::endl << linesIntersect(c1, v1, c2, v2, c3, v3, c4, v4) << std::endl << std::endl;
		while(true){}*/
		
		for (int i = 0; i < sizeof(barrier1D) / 2; i++)
		{
			if (linesIntersect(*x1, *y1, *x2, *y2, (*barrier1D[i]).x1, (*barrier1D[i]).y1, (*barrier1D[i]).x2, (*barrier1D[i]).y2))
			{
				
			}
			else if (linesIntersect(*x3, *y3, *x4, *y4, (*barrier1D[i]).x1, (*barrier1D[i]).y1, (*barrier1D[i]).x2, (*barrier1D[i]).y2))
			{

			}
			else if(checkWithPoint && pointIntersect(*x5, *y5, (*barrier1D[i]).x1, (*barrier1D[i]).y1, (*barrier1D[i]).x2, (*barrier1D[i]).y2))
			{
				
			}
			else
			{
				//std::cout << "none";
			}
		}
		
		//std::cout << "   | x1: " << *x1 << " | y1: " << *y1 << " | x2: " << *x2 << " | y2: " << *y2 << " | x3: " << (*barrier1D[2]).x1 << " | y3: " << (*barrier1D[2]).y1 << " | x4: " << (*barrier1D[2]).x2 << " | y4: " << (*barrier1D[2]).y2;
		/*
		for (int i = 0; i < (int)sizeof(barrier2D) / 8; i++)
		{
			if (linesIntersect(*x1, *y1, *x2, *y2, (*barrier2D[i]).x1, (*barrier2D[i]).y2, (*barrier2D[i]).x2, (*barrier2D[i]).y2)
				|| linesIntersect(*x3, *y3, *x4, *y4, (*barrier2D[i]).x1, (*barrier2D[i]).y2, (*barrier2D[i]).x2, (*barrier2D[i]).y2))
			{
				std::cout << "o" << 0 << " ";
			}
			else if (checkWithPoint && pointIntersect(*x5, *y5, (*barrier2D[i]).x1, (*barrier2D[i]).y1, (*barrier2D[i]).x2, (*barrier2D[i]).y2))
			{
				std::cout << "o" << 0 << "p ";
			}
			else
			{
				//std::cout << "none";
			}

			if (linesIntersect(*x1, *y1, *x2, *y2, (*barrier2D[i]).x2, (*barrier2D[i]).y1, (*barrier2D[i]).x2, (*barrier2D[i]).y2)
				|| linesIntersect(*x3, *y3, *x4, *y4, (*barrier2D[i]).x2, (*barrier2D[i]).y1, (*barrier2D[i]).x2, (*barrier2D[i]).y2))
			{
				std::cout << "o" << 1 << " ";
			}
			else if (checkWithPoint && pointIntersect(*x5, *y5, (*barrier2D[i]).x1, (*barrier2D[i]).y1, (*barrier2D[i]).x2, (*barrier2D[i]).y2))
			{
				std::cout << "o" << 1 << "p ";
			}
			else
			{
				//std::cout << "none";
			}
		}
		*/
		std::cout << std::endl;
	}